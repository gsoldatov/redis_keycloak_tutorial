+ KeyCloak container:
    + pass params from configuration;
    + setup programmatically:
        ++ add & delete app realm;
        ++ add & delete client;
        ++ add & delete roles;
        ++ add & delete users;
    + ensure realm & user configuration persists container being stopped;
    x add healthcheck to docker run command to check if container is up;
    + expose healthcheck port;

+ CLI utility for containers:
    + run:
        + runs Keycloak container;
        + performs initial configuration of keycloak;
    + stop:
        + stops Keycloak container;
    + remove:
        + removes Keycloak container;

+ web app:
    + auth routes:
        + login:
            + gets a new token from Keycloak & returns it;
            + handles network errors;
            + handles incorrect credentials;
        + logout;
    + app routes:
        + protected (first role);
        + protected (second role);

+ tests:
    + fixtures:
        + config;
        + KC container;
        + wait for Keycloak to be ready;
        + test config (custom KC realm);
        + test KC realm & data (drop in teardown);
        + async test client (app without cache);
        + async test client (app without cache & with "disabled" keycloak); # or override dependency KC service dependency
    
    + tests:
        + login:
            + validation;
            + network error;
            + disabled user;
            + invalid credentials;
            + successful login;
        + logout:
            + network error;
            + missing token;
            + invalid token:
                + wrong format;
                x add a role, which does not exist;
            + expired token;
            x token of a disabled user;
            + successful logout;
        + first protected route:
            + network error when validating token;
            + missing token;
            + invalid token format;
            + expired token;
            + token without required role;
            + valid request with a correct token;
            + valid request with a refreshed token;
        + second protected route:
            + network error when validating token;
            + missing token;
            + invalid token format;
            + expired token;
            + token without required role;
            + valid request with a correct token;
            + valid request with a refreshed token;

x limit scope to app_client when logging in;

+ Keycloak:
    + change app roles:
        x add `can_login` or use default role/setting;
        + add `can_post`;

+ setup Redis container:
    + add configuration;
    + add container manager;
    + add to CLI;

- routes:
    + change routes:
        + add /auth prefix to auth routes;
        + add /misc prefix to test routes;
    
    // redis.io/docs/latest/develop/clients/patterns/twitter-clone/

    + /auth/register route:
        + validates provided credentials;
        + passes provided credentials to Keycloak;
        + returns 503, if Keycloak is unavailable;
        + returns 400, if user was not created;
        + adds data of the new user to the database;
        + returns 503, if Redis is unavailable;
        + returns 201;
    
    + test fixtures:
        x add key prefix for all Redis keys to support running tests;
        
        + rename fixtures;

        + config fixture for unavailable Keycloak & Redis:
            + add Redis settings;
            + change scope to module;
        
        + add a shared test state manager class;    // use a file lock https://py-filelock.readthedocs.io/en/latest/index.html
        + add a session fixute for resetting the shared state;

        + add a fixture for obtaining a Redis database number:
            + use a file lock to read currently used database number, increment it and write new state;
            x store an array of released database numbers:
                x append to it when module tests are done;
                x pop from it before incrementing the counter;
                x do not exceed maximum database number from the config;
                x retry, if counter reached max value and no released number are available;

        + test config fixture:
            + module-scoped;
            + set test Redis settings (db number & network);
        
        + Redis client fixture:
            + module-scoped;
            + ensures Redis is up;
            + connects to the correct DB;
        
        + app & client fixtures with Keycloak & Redis available:
            + add Redis DB cleanup after tests;
        
        + config fixture for Redis unavailable:
            + module-scoped;
            + ensures Keycloak is available;
        
        + app & client fixtures for Redis unavailable;
        
    + /auth/register tests:
        + validation;
        + keycloak network error;
        + redis network error;
        + existing email;
        + existing username;
        + successful registration;
    
    - rename KeycloakManager & keycloak_manager + keycloak/setup.py;

    - add error middleware:
        - catch existing exceptions:
            - split AuthException into UnauthorizedOperationException & ForbiddenOperationException (trigger 401 & 403 HTTP responses);
        - catch other exceptions:
            - log;
            - return 500;
        - update Keycloak client exceptions:
            - remove KeycloakPostError from registration command;
            ???
    
    - proparage subprocess errors during container operations;
    
    // returns user info
    - GET /users/:user_id route:
        - returns public user info from the database;
        - returns 404 if user not found;
    
    // adds a user follower
    - PUT /users/:user_id/followers/:follower_id:
        - validates user token:
            - returns 401, if token does not exist;
            - retuns 403, if token was issued for another user;
        - adds `follower_id` to the followers sorted set of `user_id`;
        - adds posts of `user_id` to the feed of `follower_id`;
        - returns 404 if `user_id` or `follower_id` does not exist;
    
    // removes a user follower
    - DELETE /users/:user_id/followers/:follower_id:
        - validates user token:
            - returns 401, if token does not exist;
            - retuns 403, if token was issued for another user;
        - removes `follower_id` from the followers sorted set of `user_id`;
        - removes posts of `user_id` from the feed of `follower_id`;
        - returns 404 if `user_id` does not exist;
        - retunrs 200 if `follower_id` does not exist;
    
    // returns paginated user followers
    - GET /users/:user_id/followers:
        - gets starting post from URL params;
        - returns 404 if `user_id` does not exist;
        - returns a paginated list of followers of `user_id`;
        - returns pagination info (total followers, next & prev pages);
    
    // adds a new post of a user
    - POST /users/:user_id/posts:
        - validates user token:
            - returns 401, if token does not exist;
            - retuns 403, if token was issued for another user;
        - validates user post body;
        - adds the post to the list of user posts;
        - adds the post to the feeds of user's followers;
    
    // returns paginated posts of user
    - GET /users/:user_id/posts:
        - gets starting post from URL params;
        - returns 404 if $user_id does not exist;
        - returns a paginated list of user's posts;
        - returns pagination info (next post ID & total posts);
    
    // returns paginated feed of user
    - GET /users/:user_id/feed:
        - gets a starting post from URL params;
        - returns 404 if $user_id does not exist;
        - returns a paginated list of posts in user's feed;
        - returns pagination info (next post ID & total posts);

- Redis keys & values:
    - $prefix:user:$user_id: hash with data of $user_id;
    - $prefix:user_followers:$user_id: sorted set with IDs of followers of $user_id;
    - $prefix:user_feed:$user_id: sorted set with post IDs of users, followed by $user_id;
    - $prefix:user_posts:$user_id: list of post IDs of $user_id posts;
    - $prefix:id_next_post: ID of next created post;
    - $prefix:post:$post_id: data of $post_id;

? move access/refresh tokens store to Redis;

- allow logging in only via email (forbid using username) & add tests;

- tests:
    ???

- Redis cache:
    - add tokens on login;
    - invalidate tokens on logout or expiry;
    - refresh tokens on valid route calls;

- CLI utility for contains:
    - add Redis container management;

- tests:
    - mocks:
        - test config;
        - test containers:
            ? use dev containers with temp databases & realms;
        - app & client;
    
    - tests:
        ???
